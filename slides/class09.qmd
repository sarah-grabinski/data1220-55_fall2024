---
title: "Class 09"
subtitle: "DATA1220-55, Fall 2024"
author: "Sarah E. Grabinski"
date: '2024-09-18'
format:
  revealjs: 
    theme: default
    self-contained: true
    slide-number: true
    footnotes-hover: true
    echo: false
    preview-links: auto
    fig-align: center
    footer: "DATA1220-55 Fall 2024, Class 09 | Updated: {{< meta date >}} |  [Canvas](https://canvas.jcu.edu/courses/36290) | [Campuswire](https://campuswire.com/c/G6427C531/feed)"
  beamer:
    header-includes: 
      - \newcommand{\theHtable}{\thetable}
    echo: false
    slide-number: true
    navigation: horizontal
    theme: default
    self-contained: true
    preview-links: auto
    fig-align: center
    footer: "DATA1220-55 Fall 2024, Class 09 | Updated: {{< meta date >}} |  [Canvas](https://canvas.jcu.edu/courses/36290) | [Campuswire](https://campuswire.com/c/G6427C531/feed)"
---

```{r}
library(janitor)
library(datasets)
library(patchwork)
library(readxl)
library(mosaic)
library(kableExtra)
library(tidyverse)

theme_set(theme_bw())

songs <- read_xlsx('./class08/Taylor Swift Radio.xlsx') |>
  mutate(artists_split = str_split(artists, ', '))

songs_summary <- data.frame(artists = unlist(songs$artists_split)) |>
  mutate(artists = ifelse(artists %in% c('Taylor Swift', 
                                         'Chappell Roan', 
                                         'Billie Eilish', 
                                         'Adele', 
                                         'Lana Del Rey', 
                                         'Meghan Trainor', 
                                         'Charli xcx'), 
                          artists, 'Other')) |>
  summarize(n = n(), proportion = n() / nrow(songs), .by = 'artists')
```

## Homework 2 {.smaller}

-   [Instructions](https://canvas.jcu.edu/files/3708401/download?download_frd=1) (`homework2_instructions.pdf`), a [Quarto markdown template](https://canvas.jcu.edu/files/3708307/download?download_frd=1) (`homework2_template.qmd`), and an [example HTML output](https://canvas.jcu.edu/files/3708306/download?download_frd=1) (`homework2_example.html`) are available for download under Chapter 2 on the [Modules](https://canvas.jcu.edu/courses/36290/modules) page in Canvas.

-   Upload ***TWO*** (2) documents to [Homework 2](https://canvas.jcu.edu/courses/36290/assignments/451733) on the [Assignments](https://canvas.jcu.edu/courses/36290/assignments) page in Canvas by Friday 9/20/2024 by 6:00pm: `homework2_yourlastname.qmd` and `homework2_yourlastname.html`

-   [Video walk-through](https://canvas.jcu.edu/files/3708369/download?download_frd=1) of Homework 2 under Tutorials on the Modules page in Canvas. Make sure you're caught up on the [video walk-through of homework 1](https://canvas.jcu.edu/files/3695568/download?download_frd=1).

## Late Policy

"This homework is due by 6:00pm on Friday, 9/20/24. No credit will be lost for assignments received by 7:00pm to account for issues with uploading. 10% of the points will be deducted from assignments received by 9:00am on Saturday, 9/21/24. Assignments turned in after this point are only eligible for 50% credit, so it benefits you to turn in whatever you have completed by the due date."

## How can I get help with homework? {.smaller}

-   **Read the [textbook](https://canvas.jcu.edu/files/3669904/download?download_frd=1).** Many of you are asking for additional examples. Luckily, there are tons we didn't go over in the textbook.

-   **Ask a question on our [Campuswire class feed](https://campuswire.com/c/G6427C531/feed).** I'm only one person, and I may not be able to give you a prompt answer. However, the 20+ other people in the class might be able to.

-   **Come to office hours.** I will be available after class today Wednesday 9/25/2024 from 2:30pm - 4:00pm. If you cannot make it, reach out to me to try and schedule an appointment.

## Chapter 3 Objectives

-   Define probability, random processes, and the law of large numbers

-   Describe the sample space for disjoint and non-disjoint outcomes

-   Calculate probabilities using the General Addition and Multiplication Rules

-   Create a probability distribution for disjoint outcomes

## Defining Probability

What does the word **probability** mean to you?

. . .

"Highly likely"

. . .

"Probably"

. . .

"About even"

. . .

"Almost no chance"

## People interpret probability differently

![Did your estimate fall within these ranges? Are these ranges reasonable?](https://github.com/sarah-grabinski/data1220-55_fall2024/blob/main/slides/class08/perceptions-of-probability.PNG?raw=true){fig-align="center"}

## So what is probability?

::: callout-note
## Frequentist Definition

The proportion of times that a particular outcome would occur if we observed a random process an infinite number of times.
:::

-   A **random process** is one where you know which outcomes are possible (i.e. the **sample space**) but you don't know which outcome comes next

-   Examples of a **random process**: coin toss, die roll, stock market

## How do you know a process is random?

![Both Apple and Spotify took steps to make their "shuffle" features less random after complaints from users.](https://github.com/sarah-grabinski/data1220-55_fall2024/blob/main/slides/class08/shuffle.png?raw=true){fig-align="center"}

## A brief history of "Shuffle" {.smaller}

-   January 11, 2005 – Apple releases the iPod Shuffle, a small device capable only of playing music randomly ("true" shuffle)

    -   September 7, 2005 – Apple offers "Smart Shuffle" in response to complaints, which controlled how likely songs from the same album or artist would play close together

-   July 2011 – Spotify launches in the United States using the [Fisher-Yates Algorithm](https://engineering.atspotify.com/2014/02/28/how-to-shuffle-songs/), which is like picking tickets out of a hat until no more remain

    -   February 2014 – Spotify modifies their sampling algorithm to ensure an even distribution across albums/artists

## What went wrong?

-   The human brain is good at finding patterns in noise, even when there are none

-   If an artist is repeated "too soon", the listener doesn't feel the order is random

-   We perceive a "random" distribution as also being "uniform" and "fair"

## So why didn't we like a "true" random shuffle? {.smaller}

-   Songs not evenly distributed across albums and artists on a playlist

    -   Some albums/artists may play more frequently than others simply because they have more songs in the library/on the playlist

    -   Each song is equally likely to play next (uniform), but not each artist (not uniform)

    -   Artists/albums with more songs also more likely to play in a row

-   A true random shuffle might play the same artist multiple times in a row

    -   It's unusual but not impossible to roll a 1 on a die 3 times in a row

    -   It's also possible for the same song to play twice in a row

## Example: Spotify Playlists

```{r}
songs |> 
  mutate(artists = ifelse(artists %in% c('Taylor Swift', 
                                         'Chappell Roan', 
                                         'Billie Eilish', 
                                         'Adele', 
                                         'Lana Del Rey', 
                                         'Meghan Trainor') |
                            str_detect(artists, 'Charli'), 
                          artists, 'Other'),
         artists = str_replace_all(artists, 
                                   c(', ' = ',\n', 
                                     'Del Rey' = '\nDel Rey',
                                     'Chappell Roan' = 'Chappell\nRoan', 
                                     'Meghan Trainor' = 'Meghan\nTrainor'))) |>
  summarize(n = n(), .by = artists) |>
  ggplot(aes(x = reorder(artists, n), 
             y = n, fill = artists)) +
  geom_col() +
  guides(fill = 'none') +
  labs(title = "Number of Songs on the 'Taylor Swift Radio' playlist\non Spotify by Artist(s)",
       subtitle = 'Total artists = 26', 
       x = 'Artist(s)', y = 'Count of Songs on Playlist') +
  theme(axis.text.x = element_text(size = 10))
```

## What if shuffle was truly random?

Each time the song changes, every song on the playlist is eligible to be played next

-   Does not matter if the song was just played

-   Does not matter who the artist is

We call this ***sampling with replacement***.

-   Like drawing a playing card, looking at it, then putting it back in the deck before the next draw

-   Repetition of outcomes is possible

## Sampling With Replacement

![](https://github.com/sarah-grabinski/data1220-55_fall2024/blob/main/slides/class09/Sampling%20With%20Replacement.png?raw=true){fig-align="center"}

## How often were artists repeated during Spotify's original shuffle?

```{r}
set.seed(123)

repeat_df <- lapply(rep(10, 50), function(x) {
  artists_sampled <- unlist(songs[sample(1:nrow(songs), 
                                          x, replace = T), 
                                   'artists_split'])
  df <- data.frame(artists = unique(songs$artists)) |>
    mutate(n = sapply(artists, function(x) sum(artists_sampled == x)))
}) |>
  bind_rows(.id = 'sample') |>
  mutate(sample = lapply(sample, 
                         function(x) str_pad(x, width = 2, 
                                             side = 'left', pad = '0'))) |>
  mutate(artist = ifelse(artists %in% songs_summary$artists, 
                      artists, 'Other')) |>
  summarize(n = sum(n), 
            proportion = sum(n) / 10, 
            .by = c('sample', 'artist'))

repeat_df |>
  mutate(artist = str_replace_all(artist, ' ', '\n')) |>
  ggplot(aes(y = n, fill = artist)) +
  geom_hline(yintercept = 0) +
  geom_histogram(binwidth = 1, col = 'white') +
  geom_vline(xintercept = 0) +
  guides(fill = 'none') +
  facet_grid(cols = vars(artist)) +
  scale_y_continuous(breaks = seq(0, 10)) +
  coord_cartesian(ylim = c(0, NA)) +
  labs(x = 'Count of 10-Song Samples', y = 'Number of Times Played', 
       title = 'Distribution of the Number of Times an Artist is Played in 10 Songs', 
       subtitle = 'n = 50')
```

## How often were artists repeated during Spotify's original shuffle?

```{r}
repeat_df |>
  summarize(proportion = n() / 50, 
            .by = c('artist', 'n')) |>
  mutate(artist = str_replace_all(artist, ' ', '\n')) |>
  ggplot(aes(x = proportion, y = factor(n), fill = artist)) +
  geom_col(col = 'white') +
  geom_vline(xintercept = 0) +
  guides(fill = 'none') +
  facet_grid(cols = vars(artist)) +
  # scale_y_continuous(breaks = seq(0, 10)) +
  labs(x = 'Proportion of 10-Song Samples', y = 'Number of Times Played', 
       title = 'Distribution of the Number of Times an Artist is Played in 10 Songs', 
       subtitle = 'n = 50') +
  theme(axis.text.x = element_text(size = 5))
```

## What is the probability of hearing a song by Chappell Roan?

-   There is some "true" real-world probability that the next song is by Chappell Roan

    -   Population proportion ($p$)

-   There is our "observed" probability that the next song is by Chappell Roan

    -   Sample proportion ($\hat{p}_n$)

## Defining the sample space

The **sample space** $s$ or $S$ is the total collection of possible outcomes or events for a **random process**.

-   Die rolls: 1, 2, 3, 4, 5, 6

-   Coin flips: heads, tails

-   Stock market: up, down, no change

For this example, the **sample space** could be all the songs on the playlist (n = 50) or all the artists who perform them (n = 26).

## Example sample spaces

![](https://github.com/sarah-grabinski/data1220-55_fall2024/blob/main/slides/class09/sample-space-examples.png?raw=true){fig-align="center"}

## Another sample space

![](https://github.com/sarah-grabinski/data1220-55_fall2024/blob/main/slides/class09/cards_ss.png?raw=true){fig-align="center"}

## Representing the sample space - 1 event

![](https://github.com/sarah-grabinski/data1220-55_fall2024/blob/main/slides/class09/sample-space-1-outcome.png?raw=true){fig-align="center"}

## Representing the sample space - complements

In the sample space $S$, the complement of event A occurring is event A *not* occurring. This is written as A^C^ or A'.

![](https://github.com/sarah-grabinski/data1220-55_fall2024/blob/main/slides/class09/complement.png?raw=true){fig-align="center"}

## 2 Events - Disjoint Outcomes

Outcomes are **disjoint** or **mutually exclusive** if they cannot both happen at the same time

-   Taylor Swift and Adele did not collaborate on any songs on this playlist

-   The next song played can either be by Taylor Swift OR by Chappell Roan but not by Taylor Swift AND Chappell Roan

-   The events "The next song is by Taylor Swift" and "The next song is by Chappell Roan" are ***disjoint***/***mutually exclusive***

## Defining 2 disjoint events in the sample space

![](https://github.com/sarah-grabinski/data1220-55_fall2024/blob/main/slides/class09/disjoint1.png?raw=true){fig-align="center"}

## 2 Events - Non-Disjoint Outcomes

**Non-disjoint** outcomes can occur at the same time.

-   Charli xcx and Billie Eilish collaborated on a song on this playlist
-   The next song played could be by Charli xcx or by Billie Eilish OR by BOTH Charli xcx and Billie Eilish.
-   The events "The next song is by Charli xcx" and "The next song is by Billie Eilish" are ***non-disjoint***

## Defining 2 non-disjoint events in the sample space

![](https://github.com/sarah-grabinski/data1220-55_fall2024/blob/main/slides/class09/sample-space-2-outcome-venn.png?raw=true){fig-align="center"}

## Example: Non-Disjoint Outcomes

![The beaverduck from [Tenso Graphics](https://cargocollective.com/tensographics)](https://bookdown.org/daniel_flores_agreda/Prob1-GSEM-UNIGE/img/fun/R9mJR.jpeg)

## Calculating probabilities

-   Probabilities are proportions, or the number of observations with a particular value divided by...

    -   the total number of observations in a sample ($n$) for the sample proportion ($\hat{p}_n$)

    -   the total number of outcomes in the sample space ($s$) for the population proportion ($p$)

-   Proportions range from 0 (no observations/outcomes) to 1 (all observations/outcomes)

-   Also may be a percentage, ranging from 0% to 100% (multiply proportion by 100)

## Probability notation and calculation

$$
\operatorname{Probability}(\operatorname{Event A})=\operatorname{P}(\operatorname{A})
$$

::: pause
:::

$$
\begin{aligned}
\operatorname{Sample Probability}(\operatorname{A})&=\frac{\operatorname{count}(\operatorname{observation = A})}{\operatorname{count}(\operatorname{observations in sample})} \\
&=\hat{p}_n
\end{aligned}
$$

::: pause
:::

$$ 
\begin{aligned}
\operatorname{Population P}(\operatorname{A})&=\frac{\operatorname{count}(\operatorname{event = A})}{\operatorname{count}(\operatorname{events in sample space})} \\
&=p
\end{aligned}
$$

## Calculating Probabilities with Complements

$$
\begin{aligned}
\operatorname{P}(\operatorname{S})&=1 \\
&= \operatorname{P}(\operatorname{A})+\operatorname{P}(\operatorname{A}^{\operatorname{C}}) \\
&= \operatorname{P}(\operatorname{A})+\operatorname{P}(\operatorname{A}^{\operatorname{'}})
\end{aligned}
$$

## Proportion of Songs by Artist (Population Probability)

```{r}
songs_summary |>
  mutate(artists = str_replace_all(artists, 
                                   c(', ' = ',\n', 
                                     'Del Rey' = '\nDel Rey',
                                     'Chappell Roan' = 'Chappell\nRoan', 
                                     'Meghan Trainor' = 'Meghan\nTrainor'))) |>
  mutate(prop = n / 50) |>
  ggplot(aes(x = reorder(artists, prop), 
             y = prop, fill = artists)) +
  geom_col() +
  guides(fill = 'none') +
  labs(x = 'Artist', y = 'Proportion', 
       title = 'Proportion of Songs by Artist on Taylor Swift Radio',
       subtitle = 'n = 50')
```

## Calculating the Population Probability ($p$) for a Single Event

$p=\operatorname{Population Probability}(\operatorname{Next Song by Chappell Roan})$

-   The sample space for the population probability that the next song is by Chappell Roan when there is "true" shuffle or ***sampling with replacement*** is all songs on the playlist ($n=50$).

-   Chappell Roan has 7 songs on the playlist, so the event "The next song is by Chappell Roan" occurs 7 times within the sample space.

## Calculating the Population Probability ($p$) for a Single Event

The population probability $p$ of the next song being by Chappell Roan is...

$$
\begin{aligned}
p&=\operatorname{P}(\operatorname{Next Song by Chappell Roan}) \\
&=\frac{\operatorname{count}(\operatorname{Songs By Chappell Roan})}{\operatorname{count}(\operatorname{Total Possible Songs})} \\
&=\frac{7}{50} \\
&=0.14 \\
&= 14\%
\end{aligned}
$$

## Proportion of Chappell Roan songs

```{r}
songs_summary |>
  mutate(proportion = n / 50, 
         chappell_roan = ifelse(artists == 'Chappell Roan', 
                                T, F)) |>
  summarize(proportion = sum(proportion), 
            .by = 'chappell_roan') |>
  ggplot(aes(x = reorder(chappell_roan, proportion), 
             y = proportion, fill = chappell_roan)) +
  geom_col() +
  guides(fill = 'none') +
  scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
  labs(x = 'Song by Chappell Roan?', y = 'Proportion of Songs on Playlist', 
       title = 'Proportion of Songs by Chappell Roan on the\nTaylor Swift Radio Spotify Playlist', 
       caption = 'Calculated probability = 0.14 (14%)')
```

## Calculating the Sample Probability ($\hat{p}_n$) for a Single Event

-   The sample space for the sample probability of the next song being by Chappell Roan when there is "true" shuffle or ***sampling with replacement*** is the number of songs listened to so far ($n=1+$).

-   Each time a Chappell Roan song is played, an event is counted / recorded.

## Calculating the Sample Probability ($\hat{p}_n$) for a Single Event

The population probability of the next song being by Chappell Roan is...

$$
\begin{aligned}
\hat{p}_n&=\operatorname{P}(\operatorname{Next Song by Chappell Roan}) \\
&=\frac{\operatorname{count}(\operatorname{Songs Heard By Chappell Roan})}{\operatorname{count}(\operatorname{Total Songs Heard})} \\
&=\frac{x}{n}
\end{aligned}
$$

## How well does a sample proportion represent the population proportion?

Should we listen to 1 song?

```{r}
set.seed(123)

n_samples <- 1

data.frame(artists = songs[sample(1:nrow(songs), 
                                  n_samples, replace = T), ][['artists']]) |>
  mutate(by_chappell = ifelse(artists == 'Chappell Roan', T, F)) |>
  summarize(n = n(), 
            proportion = n() / n_samples,
            .by = 'by_chappell') |>
  ggplot(aes(x = proportion, y = by_chappell)) +
  geom_col(fill = 'steelblue', col = 'black') +
  scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
  labs(x = 'Proportion of Heard Songs by Chappell Roan', 
       y = 'Was the song by Chappell Roan?', 
       title = 'Proportion of Songs by Chappell Roan on the\n"Taylor Swift Radio" Spotify Playlist', 
       subtitle = paste('Number of songs listened to: n =', n_samples))
```

## How well does the sample proportion represent the population proportion?

Should we listen to 5 songs?

```{r}
set.seed(456)

n_samples <- 5

data.frame(artists = songs[sample(1:nrow(songs), 
                                  n_samples, replace = T), ][['artists']]) |>
  mutate(by_chappell = ifelse(artists == 'Chappell Roan', T, F)) |>
  summarize(n = n(), 
            proportion = n() / n_samples, 
            .by = 'by_chappell') |>
  ggplot(aes(x = proportion, y = by_chappell)) +
  geom_col(fill = 'steelblue', col = 'black') +
  scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
  labs(x = 'Proportion of Heard Songs by Chappell Roan', 
       y = 'Was the song by Chappell Roan?', 
       title = 'Proportion of Songs by Chappell Roan on the\n"Taylor Swift Radio" Spotify Playlist', 
       subtitle = paste('Number of songs listened to: n =', n_samples))
```

## How well does the sample proportion represent the population proportion?

Should we listen to 10 songs?

```{r}
set.seed(789)

n_samples <- 10

data.frame(artists = songs[sample(1:nrow(songs), 
                                  n_samples, replace = T), ][['artists']]) |>
  mutate(by_chappell = ifelse(artists == 'Chappell Roan', T, F)) |>
  summarize(n = n(), 
            proportion = n() / n_samples,
            .by = 'by_chappell') |>
  ggplot(aes(x = proportion, y = by_chappell)) +
  geom_col(fill = 'steelblue', col = 'black') +
  scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
  labs(x = 'Proportion of Heard Songs by Chappell Roan', 
       y = 'Was the song by Chappell Roan?', 
       title = 'Proportion of Songs by Chappell Roan on the\n"Taylor Swift Radio" Spotify Playlist', 
       subtitle = paste('Number of songs listened to: n =', n_samples))
```

## How well does the sample proportion represent the population proportion?

Should we listen to 100 songs?

```{r}
set.seed(123)

n_samples <- 100

data.frame(artists = songs[sample(1:nrow(songs), 
                                  n_samples, replace = T), ][['artists']]) |>
  mutate(by_chappell = ifelse(artists == 'Chappell Roan', T, F)) |>
  summarize(n = n(), 
            proportion = n() / n_samples,  
            .by = 'by_chappell') |>
  ggplot(aes(x = proportion, y = by_chappell)) +
  geom_col(fill = 'steelblue', col = 'black') +
  scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
  labs(x = 'Proportion of Heard Songs by Chappell Roan', 
       y = 'Was the song by Chappell Roan?', 
       title = 'Proportion of Songs by Chappell Roan on the\n"Taylor Swift Radio" Spotify Playlist', 
       subtitle = paste('Number of songs listened to: n =', n_samples))
```

## How well does the sample proportion represent the population proportion?

Should we listen to 200 songs?

```{r}
set.seed(123)

n_samples <- 200

data.frame(artists = songs[sample(1:nrow(songs), 
                                  n_samples, replace = T), ][['artists']]) |>
  mutate(by_chappell = ifelse(artists == 'Chappell Roan', T, F)) |>
  summarize(n = n(), 
            proportion = n() / n_samples,  
            .by = 'by_chappell') |>
  ggplot(aes(x = proportion, y = by_chappell)) +
  geom_col(fill = 'steelblue', col = 'black') +
  scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
  labs(x = 'Proportion of Heard Songs by Chappell Roan', 
       y = 'Was the song by Chappell Roan?', 
       title = 'Proportion of Songs by Chappell Roan on the\n"Taylor Swift Radio" Spotify Playlist', 
       subtitle = paste('Number of songs listened to: n =', n_samples))
```

## Law of Large Numbers

***How well the sample proportion*** $\hat{p}_n$ represents the population proportion $p$ depends on the size of the denominator.

As more observations are collected, the sample proportion $\hat{p}_n$ of a particular outcome approaches the population proportion $p$ of that outcome.

```{r}
set.seed(123)

sample_sizes <- seq(1, 200, by = 1)

sample_df <- lapply(sample_sizes, function(x) {
  df <- data.frame(artists = songs[sample(1:nrow(songs), 
                                          x, replace = T), ][['artists']]) |>
    mutate(by_chappell = ifelse(artists == 'Chappell Roan', T, F)) |>
    summarize(count = n(), 
              proportion = n() / x,  
              .by = 'by_chappell') |>
    pivot_wider(names_from = 'by_chappell', 
                values_from = c('count', 'proportion'))
}) |>
  bind_rows(.id = 'sample') |>
  mutate(across(where(is.numeric), \(x) ifelse(is.na(x), 0, x)), 
         sample_size = as.numeric(sample))

sample_df |>
  ggplot(aes(x = sample_size, y = proportion_TRUE)) +
  geom_hline(yintercept = 0) +
  geom_vline(xintercept = 0) +
  geom_hline(
    yintercept = songs_summary[songs_summary$artists == 'Chappell Roan', 
                               'proportion'], 
    linewidth = 2, linetype = 'dashed', col = 'black') +
  geom_point(size = 3, alpha = 0.5, col = 'steelblue') +
  geom_line(linewidth = 1, col = 'steelblue') +
  labs(x = '# of Songs Listened To', 
       y = 'Sample Proportion', 
       title = 'Sample Proportion of Songs by Chappell Roan\nby Total Number of Songs Heard',
       subtitle = 'Sample Size Ranged from 1 to 200',
       caption = 'Dashed line = Population proportion of Chappell Roan songs')
```

## Small Sample Size / Small Denominator = Unreliable

The sample proportion is an unreliable estimator of the population proportion when the sample size is small.

```{r}
sample_df |>
  ggplot(aes(x = sample_size, y = proportion_TRUE)) +
  geom_hline(yintercept = 0) +
  geom_vline(xintercept = 0) +
  geom_hline(
    yintercept = songs_summary[songs_summary$artists == 'Chappell Roan', 
                               'proportion'], 
    linewidth = 2, linetype = 'dashed', col = 'black') +
  geom_point(size = 3, alpha = 0.5, col = 'steelblue') +
  geom_line(linewidth = 1, col = 'steelblue') +
  coord_cartesian(ylim = c(0, 0.5), xlim = c(0, 50)) +
  labs(x = '# of Songs Listened To', 
       y = 'Sample Proportion', 
       title = 'Sample Proportion of Songs by Chappell Roan\nby Total Number of Songs Heard',
       subtitle = 'Sample Size Ranged from 1 to 200, n = 1-50 shown here',
       caption = 'Dashed line = Population proportion of Chappell Roan songs')
```

## Large Sample Size / Small Denominator = Reliable Sample Proportion

The sample proportion is a reliable estimator of the population proportion when the sample size is large.

```{r}
sample_df |>
  ggplot(aes(x = sample_size, y = proportion_TRUE)) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  geom_hline(
    yintercept = songs_summary[songs_summary$artists == 'Chappell Roan', 
                               'proportion'], 
    linewidth = 2, linetype = 'dashed', col = 'black') +
  geom_point(size = 3, alpha = 0.5, col = 'steelblue') +
  geom_line(linewidth = 1, col = 'steelblue') +
  coord_cartesian(ylim = c(0, 0.5), xlim = c(150, 200)) +
  labs(x = '# of Songs Listened To', 
       y = 'Sample Proportion', 
       title = 'Sample Proportion of Songs by Chappell Roan\nby Total Number of Songs Heard',
       subtitle = 'Sample Size Ranged from 1 to 200, n = 150-200 shown here',
       caption = 'Dashed line = Population proportion of Chappell Roan songs')
```
