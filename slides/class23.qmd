---
title: "Class 23"
subtitle: "DATA1220-55, Fall 2024"
author: "Sarah E. Grabinski"
date: '2024-10-28'
format:
  revealjs: 
    theme: default
    self-contained: true
    slide-number: true
    footnotes-hover: true
    execute:
      echo: false
      cache: false
      message: false
      warning: false
    preview-links: auto
    fig-align: center
    footer: "DATA1220-55 Fall 2024, Class 23 | Updated: {{< meta date >}} |  [Canvas](https://canvas.jcu.edu/courses/36290) | [Campuswire](https://campuswire.com/c/G6427C531/feed)"
  beamer:
    header-includes: 
      - \usepackage{fontspec}
      - \usepackage{graphicx}
      - \usepackage{grffile}
      - \setkeys{Gin}{width=\textwidth,height=\textheight}
    execute:
      echo: false
      cache: false
      message: false
      warning: false
    slide-number: true
    navigation: horizontal
    theme: default
    self-contained: true
    preview-links: auto
    fig-align: center
    footer: "DATA1220-55 Fall 2024, Class 23 | Updated: {{< meta date >}} |  [Canvas](https://canvas.jcu.edu/courses/36290) | [Campuswire](https://campuswire.com/c/G6427C531/feed)"
---

```{r}
library(janitor)
library(RColorBrewer)
library(kableExtra)
library(tidyverse)

df <- data.frame(camps = c(rep('Y', 1328), 
                           rep('N', 353), 
                           rep('Y', 674), 
                           rep('N', 761), 
                           rep('Y', 408), 
                           rep('N', 1445), 
                           rep('Y', 105), 
                           rep('N', 278)), 
                 party = c(rep('R', 1681), 
                           rep('I', 1435), 
                           rep('D', 1853), 
                           rep(NA, 383))) |>
  mutate(party = fct_relevel(factor(party), 'R', 'I', 'D'), 
         camps = fct_relevel(factor(camps), 'Y')) 

df <- data.frame(restaurant = c(rep("McDonald's", 235), 
                                rep("Chipotle", 415), 
                                rep("Arby's", 350)), 
                 sick = c(rep('Sick', 125), 
                          rep('Not Sick', 110), 
                          rep('Sick', 165), 
                          rep('Not Sick', 250), 
                          rep('Sick', 140), 
                          rep('Not Sick', 210))) |>
  mutate(restaurant = fct_relevel(restaurant, 
                                  "McDonald's", 
                                  'Chipotle'), 
         sick = fct_relevel(sick, 'Sick'))
```

## Chi-Square Test for Independence in 2-Way Tables {.smaller}

1.  Assume the 2 variables are ***independent***. ($H_0$: Independence)

. . .

2.  Calculate the ***expected*** counts under the null hypothesis of independence.

. . .

3.  Find the ***test statistic***.

. . .

4.  Compute the ***degrees of freedom***.

. . .

5.  Determine the probability of the ***observed*** counts under the null hypothesis.

. . .

6.  If it is sufficiently unlikely to have gotten the ***observed*** data under the null hypothesis of independence, reject $H_0$ and accept $H_A$: Dependence.

## Example: Foodborne Illness

::: smaller
-   There have been 430 cases of E. coli in your region.
-   You interviewed these patients and 570 of their close associates about what they ate.
-   235 people ate at McDonald's, 415 people ate at Chipotle, and 350 ate at Arby's.
-   125, 165, and 140 of the people who ate at McDonald's, Chipotle, and Arby's respectively got sick.
:::

. . .

***Research question:*** Is whether or not a person got sick dependent on what restaurant they ate at?

## The Data

```{r}
df |>
  tabyl(restaurant, sick) |>
  adorn_totals(where = c('row', 'col')) |>
  kbl(col.names = c('Restaurant', 'Sick', 'Not Sick', 'Total'), 
      align = 'rccc', caption = 'Illness by Restaurant') |>
  kable_classic(full_width = F)
```

## Step 1: Assume independence

::: callout-tip
## The Multiplication Rule for Independent Events

The probability of event A ***and*** event B occurring is the product of the probability that A occurs and the probability that B occurs.
:::

. . .

$$
\begin{aligned}
\operatorname{Expected}_{\operatorname{A and B}}&=\frac{\operatorname{count}(A) \times  \operatorname{count}(B)}{n} \\
&= P(A) \times P(B) \times n
\end{aligned}
$$

## Step 2: Calculate expected counts {.smaller}

::::: columns
::: {.column width="50%"}
```{r}
crosstab <- df |>
  tabyl(restaurant, sick) |> 
  adorn_totals(where = c('row', 'col')) |>
  as.data.frame()

crosstab |>
  kbl(col.names = c('Restaurant', 'Sick', 'Not Sick', 'Total'), 
      align = 'rccc', caption = 'Illness by Restaurant') |>
  kable_classic(full_width = F) |>
  column_spec(4, 
              background = spec_color(c(1, NA, NA, 1), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 0.75, 
                                      na_color = 'white')) |>
  column_spec(2, 
              background = spec_color(c(rep(NA, 3), 1), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 0.75, 
                                      na_color = 'white')) |>
  column_spec(2, 
              background = spec_color(c(1, NA, NA, 0), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 1, 
                                      na_color = 'white'))
```
:::

::: {.column width="50%"}
$$
\begin{aligned}
\operatorname{Exp}_{\operatorname{McD, S}}&=\frac{n_{\operatorname{McD}} \times n_{\operatorname{S}}}{n} \\
&= \frac{235 \times 430}{1000} \\
&= 101.1
\end{aligned}
$$
:::
:::::

## Step 2: Calculate expected counts {.smaller}

::::: columns
::: {.column width="50%"}
```{r}
df |>
  tabyl(restaurant, sick) |>
  adorn_totals(where = c('row', 'col')) |>
  kbl(col.names = c('Restaurant', 'Sick', 'Not Sick', 'Total'), 
      align = 'rccc', caption = 'Illness by Restaurant') |>
  kable_classic(full_width = F) |>
  column_spec(4, 
              background = spec_color(c(1, NA, NA, 1), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 0.75, 
                                      na_color = 'white')) |>
  column_spec(3, 
              background = spec_color(c(1, NA, NA, 0), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 1, 
                                      na_color = 'white'))
```
:::

::: {.column width="50%"}
$$
\begin{aligned}
\operatorname{Exp}_{\operatorname{McD, NS}}&=\frac{n_{\operatorname{McD}} \times n_{\operatorname{NS}}}{n} \\
&= \frac{235 \times 570}{1000} \\
&= 134.0
\end{aligned}
$$
:::
:::::

## Step 2: Calculate expected counts {.smaller}

::::: columns
::: {.column width="50%"}
```{r}
df |>
  tabyl(restaurant, sick) |>
  adorn_totals(where = c('row', 'col')) |>
  kbl(col.names = c('Restaurant', 'Sick', 'Not Sick', 'Total'), 
      align = 'rccc', caption = 'Illness by Restaurant') |>
  kable_classic(full_width = F) |>
  column_spec(4, 
              background = spec_color(c(NA, 1, NA, 1), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 0.75, 
                                      na_color = 'white')) |>
  column_spec(2, 
              background = spec_color(c(NA, 1, NA, 0), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 1, 
                                      na_color = 'white'))
```
:::

::: {.column width="50%"}
$$
\begin{aligned}
\operatorname{Exp}_{\operatorname{Chi, S}}&=\frac{n_{\operatorname{Chi}} \times n_{\operatorname{S}}}{n} \\
&= \frac{415 \times 430}{1000} \\
&= 178.5
\end{aligned}
$$
:::
:::::

## Step 2: Calculate expected counts {.smaller}

::::: columns
::: {.column width="50%"}
```{r}
df |>
  tabyl(restaurant, sick) |>
  adorn_totals(where = c('row', 'col')) |>
  kbl(col.names = c('Restaurant', 'Sick', 'Not Sick', 'Total'), 
      align = 'rccc', caption = 'Illness by Restaurant') |>
  kable_classic(full_width = F) |>
  column_spec(4, 
              background = spec_color(c(NA, 1, NA, 1), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 0.75, 
                                      na_color = 'white')) |>
  column_spec(3, 
              background = spec_color(c(NA, 1, NA, 0), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 1, 
                                      na_color = 'white'))
```
:::

::: {.column width="50%"}
$$
\begin{aligned}
\operatorname{Exp}_{\operatorname{Chi, NS}}&=\frac{n_{\operatorname{Chi}} \times n_{\operatorname{NS}}}{n} \\
&= \frac{415 \times 570}{1000} \\
&= 236.6
\end{aligned}
$$
:::
:::::

## Step 2: Calculate expected counts {.smaller}

::::: columns
::: {.column width="50%"}
```{r}
df |>
  tabyl(restaurant, sick) |>
  adorn_totals(where = c('row', 'col')) |>
  kbl(col.names = c('Restaurant', 'Sick', 'Not Sick', 'Total'), 
      align = 'rccc', caption = 'Illness by Restaurant') |>
  kable_classic(full_width = F) |>
  column_spec(4, 
              background = spec_color(c(NA, NA, 1, 1), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 0.75, 
                                      na_color = 'white')) |>
  column_spec(2, 
              background = spec_color(c(NA, NA, 1, 0), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 1, 
                                      na_color = 'white'))
```
:::

::: {.column width="50%"}
$$
\begin{aligned}
\operatorname{Exp}_{\operatorname{Arb, S}}&=\frac{n_{\operatorname{Arb}} \times n_{\operatorname{S}}}{n} \\
&= \frac{350 \times 430}{1000} \\
&= 150.5
\end{aligned}
$$
:::
:::::

## Step 2: Calculate expected counts {.smaller}

::::: columns
::: {.column width="50%"}
```{r}
df |>
  tabyl(restaurant, sick) |>
  adorn_totals(where = c('row', 'col')) |>
  kbl(col.names = c('Restaurant', 'Sick', 'Not Sick', 'Total'), 
      align = 'rccc', caption = 'Illness by Restaurant') |>
  kable_classic(full_width = F) |>
  column_spec(4, 
              background = spec_color(c(NA, NA, 1, 1), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 0.75, 
                                      na_color = 'white')) |>
  column_spec(3, 
              background = spec_color(c(NA, NA, 1, 0), 
                                      alpha = 0.25, 
                                      begin = 0.75, 
                                      end = 1, 
                                      na_color = 'white'))
```
:::

::: {.column width="50%"}
$$
\begin{aligned}
\operatorname{Exp}_{\operatorname{Arb, NS}}&=\frac{n_{\operatorname{Arb}} \times n_{\operatorname{NS}}}{n} \\
&= \frac{350 \times 570}{1000} \\
&= 199.5
\end{aligned}
$$
:::
:::::

## Step 2: Calculate expected counts  {.smaller}

```{r}
obs_vs_exp <- 
  data.frame(
    restaurant = rep(c("McDonald's", 
                       'Chipotle', 
                       "Arby's"), 2),
    observed = c(125, 165, 140, 110, 250, 210), 
    expected = c(101, 178, 151, 134, 237, 199), 
    diff = c(125-101, 165-178, 140-151,
             110-134, 250-237, 210-199)
  )

obs_vs_exp |>
  kbl(col.names = c('Restaurant', 
                    'Observed', 'Expected', 'Difference')) |>
  kable_classic(full_width = F) |>
  pack_rows('Sick', 1, 3) |>
  pack_rows('Not Sick', 4, 6) |>
  column_spec(4, color = 'white',
              background = spec_color(
                obs_vs_exp$diff,
                palette = rev(brewer.pal(11, 
                                         'BrBG'))))
```


## Step 3: Find the test statistic

$$
\begin{aligned}
\chi^2_{\operatorname{df}} &= \sum^k_{i=1} \frac{{\left( \operatorname{observed} - \operatorname{expected} \right)}^2}{\operatorname{expected}} \\
&= \frac{\left(120 - 101 \right)^2}{101} + \frac{\left( 115-134 \right)^2}{134} + \frac{\left(165-178\right)^2}{178} + \\
&\phantom{{}={1}} \frac{\left(250-237 \right)^2}{237} + \frac{\left(140-151 \right)^2}{151} + \frac{\left( 210-199 \right)^2}{199} \\
&= 9.34
\end{aligned}
$$

## Step 4: Compute the degrees of freedom

For 2 categorical variables in a 2-way contingency table where $R$ is the number of rows and $C$ is the number of columns, the degrees of freedom for a chi-square test of independence is...

$$
\begin{aligned}
\operatorname{df}&=(R-1) \times (C-1) \\
&=(3-1) \times (2-1) \\
&= 2
\end{aligned}
$$

## Step 5: Determine p-value

We always use the upper tail of the probability distribution for a chi-square test, so we use the parameter `lower.tail = F` in the function.

```{r echo = T}
pchisq(9.34, df = 2, lower.tail = F)
```
## Step 6: Decide to reject $H_0$

If our significance threshold is $\alpha = 0.05$ and the p-value of 0.0094, should we reject $H_0$?

. . .

Yes! It is unlikely that we would observe the data that we did if the null hypothesis were true.

## Inference & Hypothesis Testing with Means {.smaller}

-   The distribution of sample means $\bar{x}$ calculated from samples of size $n$ from the same population approximates a normal distribution (i.e. the *sampling distribution*)

. . .

-   Observations in sample assumed to be ***independent and identically distributed*** (***i.i.d.***)

. . .

-   Need $n \ge 30$ observations in sample

. . .

-   Underlying population distribution is normal (less strict as sample $n$ increases)

## Sample Means & The Standard Normal ($z$) Distribution

-   As $n$ increases, the sampling distribution of $\bar{x}$ approximates the distribution $N \left( \mu, \frac{\sigma}{\sqrt{n}} \right)$)

. . .

-   When assumptions met, $\bar{x} \approx \mu$ and $s \approx \sigma$

. . .

-   $s \approx \sigma$ is a strong assumption!

## The $t$ distribution

-   Better than $z$ when the population standard deviation $\sigma$ is unknown (almost always)

. . .

-   Appears normal, but is flatter to allow more uncertainty about $SE=\frac{s}{\sqrt{n}}$ of $\mu$

. . .

-   Centered at 0 with the single parameter ***degrees of freedom*** ($\operatorname{df} = n-1$)

## The $t$ distribution

::::: columns
::: {.column width="50%"}
![The $t$ distribution versus the standard normal ($z$) distribution](https://raw.githubusercontent.com/sarah-grabinski/data1220-55_fall2024/refs/heads/main/slides/class23/t-dist.png)
:::

::: {.column width="50%"}
![The $t$ distribution is centered at 0 and has the parameter *degrees of freedom* ($\operatorname{df}$)](https://raw.githubusercontent.com/sarah-grabinski/data1220-55_fall2024/refs/heads/main/slides/class23/t-dist-with-df.png)
:::
:::::

## $t$ Distribution Test Statistic

$$
\begin{aligned}
T_{\operatorname{df}}&= \frac{\text{point estimate} - \text{null value}}{SE} \\
T_{n-1}&=\frac{\bar{x}-\mu}{\frac{s}{\sqrt{n}}}
\end{aligned}
$$

## P-Values in R

::::: columns
::: {.column width="50%"}
![](https://raw.githubusercontent.com/sarah-grabinski/data1220-55_fall2024/refs/heads/main/slides/class23/p-value.png){width="243"}
:::

::: {.column width="50%"}
```{r echo = T}
1 - pt(4.135, 
       df = 205)
```

```{r echo = T}
pt(4.135, 
   df = 205, 
   lower.tail = F)
```
:::
:::::

## Confidence Intervals

*   When $s \approx \sigma$, the confidence interval is $\text{point estimate} \pm Z^* \times SE$

. . .

*   When $\sigma$ is unknown, we use $\text{point estimate} \pm T^* \times SE$

. . .

*   $T^* = T_{\alpha/2}$
