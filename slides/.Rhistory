mean = mean(year),
sd = sd(year),
se = sd(year) / sqrt(50),
lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(n())),
upper95 = mean(year) + qt(0.975,
df = n()) * (sd(year) / sqrt(n()))) |> # now we group by the replicate
kable(col.names = c('n', 'sample mean',
'sample SD', 'SE for n=50',
'Lower 95% CI', 'Upper 95% CI'),
digits = c(0, 1, 1, 2, 1, 1)) |>
kable_classic(full_width = F)
samples |>
summarize(
n = n(),
mean = mean(year),
sd = sd(year),
se = sd(year) / sqrt(50),
lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(n())),
upper95 = mean(year) + qt(0.975,
df = n()) * (sd(year) / sqrt(n())))
samples |>
summarize(
n = n(),
mean = mean(year),
sd = sd(year),
se = sd(year) / sqrt(50),
lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(n())),
upper95 = mean(year) + qt(0.975,
df = n()) * (sd(year) / sqrt(n()))) |> # now we group by the replicate
kable(col.names = c('replicate', 'n', 'sample mean',
'sample SD', 'SE for n=50',
'Lower 95% CI', 'Upper 95% CI'),
digits = c(0, 1, 1, 2, 1, 1)) |>
kable_classic(full_width = F)
samples |>
summarize(
n = n(),
mean = mean(year),
lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(n())),
upper95 = mean(year) + qt(0.975,
df = n()) * (sd(year) / sqrt(n()))) |>
kable(col.names = c('replicate', 'n', 'sample mean',
'sample SD', 'SE for n=50',
'Lower 95% CI', 'Upper 95% CI'),
digits = c(0, 1, 1, 2, 1, 1)) |>
kable_classic(full_width = F)
samples |>
summarize(
n = n(),
mean = mean(year),
lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(n())),
upper95 = mean(year) + qt(0.975,
df = n()) * (sd(year) / sqrt(n()))) |>
kable(col.names = c('replicate', 'n', 'sample mean',
'Lower 95% CI', 'Upper 95% CI'),
digits = c(0, 1, 1, 2, 1, 1)) |>
kable_classic(full_width = F)
pop_mean <- pennies |>
summarize(mean = mean(year)) |>
pull(mean)
pop_mean <- pennies |>
summarize(mean = mean(year)) |>
pull(mean)
pop_mean
pop_sd <- pennies |>
summarize(sd = sd(year)) |>
pull(sd)
pop_sd
head(samples)
samples |>
summarize(
n = n(),
mean = mean(year),
lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(n())),
upper95 = mean(year) + qt(0.975,
df = n()) * (sd(year) / sqrt(n()))) |>
head() |>
kable(col.names = c('replicate', 'n', 'point estimate',
'Lower 95% CI', 'Upper 95% CI'),
digits = c(0, 1, 1, 2, 1, 1)) |>
kable_classic(full_width = F)
cis |>
head() |>
kable(col.names = c('replicate', 'n', 'point estimate',
'Lower 95% CI', 'Upper 95% CI'),
digits = c(0, 1, 1, 2, 1, 1)) |>
kable_classic(full_width = F)
cis <- samples |>
summarize(
n = n(),
mean = mean(year),
s = sd(year),
lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(n())),
upper95 = mean(year) + qt(0.975,
df = n()) * (sd(year) / sqrt(n())))
cis |>
head() |>
kable(col.names = c('replicate', 'n', 'point estimate',
'Lower 95% CI', 'Upper 95% CI'),
digits = c(0, 1, 1, 2, 1, 1)) |>
kable_classic(full_width = F)
cis |>
head() |>
kable(col.names = c('replicate', 'n', 'point estimate', 's',
'Lower 95% CI', 'Upper 95% CI'),
digits = c(0, 1, 1, 2, 1, 1)) |>
kable_classic(full_width = F)
cis |>
head() |>
kable(col.names = c('replicate', 'n', 'point estimate', 's',
'Lower 95% CI', 'Upper 95% CI'),
digits = c(0, 1, 1, 2, 1, 1), align = 'c') |>
kable_classic(full_width = F)
round(pop_mean, 1)
n
cis |>
ggplot(aes(x = replicate, y = mean)) +
geom_pointrange(aes(ymin = lower95,
ymax = upper95))
samples <- pennies %>%
rep_sample_n(size = 50,
replace = TRUE,
reps = 100)
head(samples)
head(samples)
## Summary Statistics & CIs {.smaller}
This function returns a grouped table, so you don't need to use the `.by = ` parameter to group by replicate in the `summarize()` function.
```{r echo = F}
samples |>
summarize(
n = n(),
mean = mean(year),
lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(n())),
upper95 = mean(year) + qt(0.975,
df = n()) * (sd(year) / sqrt(n()))) |>
head() |>
kable(col.names = c('replicate', 'n', 'point estimate',
'Lower 95% CI', 'Upper 95% CI'),
digits = c(0, 1, 1, 2, 1, 1)) |>
kable_classic(full_width = F)
samples |>
summarize(
n = n(),
mean = mean(year),
lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(n())),
upper95 = mean(year) + qt(0.975,
df = n()) * (sd(year) / sqrt(n()))) |>
head() |>
kable(col.names = c('replicate', 'n', 'point estimate',
'Lower 95% CI', 'Upper 95% CI'),
digits = c(0, 1, 1, 2, 1, 1)) |>
kable_classic(full_width = F)
## Summary Statistics & CIs
Complete the confidence interval calculations within the `summarize()` function.
cis <- samples |>
summarize(
n = n(),
mean = mean(year),
s = sd(year),
lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(n())),
upper95 = mean(year) + qt(0.975,
df = n()) * (sd(year) / sqrt(n())))
cis <- samples |>
summarize(
n = n(),
mean = mean(year),
s = sd(year),
lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(n())),
upper95 = mean(year) + qt(0.975,
df = n()) * (sd(year) / sqrt(n())))
## Summary Statistics & CIs
Remember, the parameters were a mean year of `r round(pop_mean, 1)` and a standard deviation of `r round(pop_sd, 1)` years in a population of `r n`. How do these compare?
```{r eval = F}
cis |>
head() |>
kable(col.names = c('replicate', 'n', 'point estimate', 's',
'Lower 95% CI', 'Upper 95% CI'),
digits = c(0, 1, 1, 2, 1, 1), align = 'c') |>
kable_classic(full_width = F)
cis |>
ggplot(aes(x = replicate, y = mean)) +
geom_pointrange(aes(ymin = lower95,
ymax = upper95))
cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate, y = mean,
col = contains_mu,
fill = contains_mu)) +
geom_pointrange(aes(ymin = lower95,
ymax = upper95))
cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate, y = mean,
col = contains_mu,
fill = contains_mu)) +
geom_pointrange(aes(ymin = lower95,
ymax = upper95)) +
theme(legend.position = 'bottom')
cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate, y = mean,
col = contains_mu,
fill = contains_mu)) +
geom_pointrange(aes(ymin = lower95,
ymax = upper95)) +
theme(legend.position = 'bottom') +
labs(title = '95% Confidence Intervals for the Mean Year of Penny Minting')
cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate, y = mean,
col = contains_mu,
fill = contains_mu)) +
geom_pointrange(aes(ymin = lower95,
ymax = upper95)) +
theme(legend.position = 'bottom') +
labs(title = '95% Confidence Intervals for the Mean Year of Penny Minting',
subtitle = 'Inferences based on Sampling vs Population Parameters')
cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate, y = mean,
col = contains_mu,
fill = contains_mu)) +
geom_pointrange(aes(ymin = lower95,
ymax = upper95)) +
theme(legend.position = 'bottom') +
labs(title = '95% Confidence Intervals for the Mean Year of Penny Minting',
subtitle = 'Inferences based on Sampling vs Population Parameters',
caption = 'Pop. Mean = 1989.8, Pop. SD = 12.4')
pop_low <- pennies |>
summarize(lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(50))) |>
pull(lower95)
pop_low
pop_low <- pennies |>
summarize(lower95 = mean(year) - qt(0.975,
df = n()) * (sd(year) / sqrt(50))) |>
pull(lower95)
pop_high <- pennies |>
summarize(upper95 = mean(year) + qt(0.975,
df = n()) * (sd(year) / sqrt(50))) |>
pull(upper95)
p1 <- cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate, y = mean,
col = contains_mu,
fill = contains_mu)) +
geom_pointrange(aes(ymin = lower95,
ymax = upper95))
p1
p1 <- cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate, y = mean,
col = contains_mu,
fill = contains_mu)) +
geom_pointrange(aes(ymin = lower95,
ymax = upper95))
p1
p2 <- p1 +
theme(legend.position = 'bottom') +
labs(title = '95% Confidence Intervals for the Mean Year of Penny Minting',
subtitle = 'Inferences based on Sampling vs Population Parameters',
caption = 'Pop. Mean = 1989.8, Pop. SD = 12.4')
p2
p2 <- p1 +
theme(legend.position = 'bottom') +
labs(title = '95% Confidence Intervals for the Mean Year of Penny Minting',
subtitle = 'Inferences from Samples vs Population Parameters',
caption = 'Pop. Mean = 1989.8, Pop. SD = 12.4')
p2
p2 <- p1 +
geom_ribbon(aes(x = replicate,
ymin = pop_low,
ymax = pop_high))
p2
p1 <- cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate)) +
geom_ribbon(aes(ymin = pop_low,
ymax = pop_high))
p1
p1 <- cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate)) +
geom_ribbon(aes(ymin = pop_low,
ymax = pop_high)) +
coord_cartesian(ylim = c(min(pennies$year),
max(pennies$year)))
p1
p1 <- cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate)) +
geom_ribbon(aes(ymin = pop_low,
ymax = pop_high)) +
coord_cartesian(ylim = c(min(cis$lower95),
max(cis$upper95)))
p1
p1 <- cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate)) +
geom_ribbon(aes(ymin = pop_low,
ymax = pop_high),
alpha = 0.1) +
coord_cartesian(ylim = c(min(cis$lower95),
max(cis$upper95)))
p1
p1 <- cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate)) +
geom_ribbon(aes(ymin = pop_low,
ymax = pop_high),
alpha = 0.5) +
coord_cartesian(ylim = c(min(cis$lower95),
max(cis$upper95)))
p1
p1 <- cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate)) +
geom_ribbon(aes(ymin = pop_low,
ymax = pop_high),
alpha = 0.25) +
geom_hline(yintercept = pop_mean) +
coord_cartesian(ylim = c(min(cis$lower95),
max(cis$upper95)))
p1
p1 <- cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate)) +
geom_ribbon(aes(ymin = pop_low,
ymax = pop_high),
alpha = 0.25) +
geom_hline(yintercept = pop_mean,
linetype = 'dashed') +
coord_cartesian(ylim = c(min(cis$lower95),
max(cis$upper95)))
p1
p2 <- p1 +
geom_pointrange(aes(ymin = lower95,
ymax = upper95,
col = contains_mu,
fill = contains_mu))
p2
p2 <- p1 +
geom_pointrange(aes(y = mean,
ymin = lower95,
ymax = upper95,
col = contains_mu,
fill = contains_mu))
p2
p1 <- cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate)) +
geom_ribbon(aes(ymin = pop_low,
ymax = pop_high),
alpha = 0.15) +
geom_hline(yintercept = pop_mean,
linetype = 'dashed') +
coord_cartesian(ylim = c(min(cis$lower95),
max(cis$upper95)))
p1
p2 <- p1 +
geom_pointrange(aes(y = mean,
ymin = lower95,
ymax = upper95,
col = contains_mu,
fill = contains_mu))
p2
p1 <- cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = replicate)) +
geom_ribbon(aes(ymin = pop_low,
ymax = pop_high),
alpha = 0.1) +
geom_hline(yintercept = pop_mean,
linetype = 'dashed') +
coord_cartesian(ylim = c(min(cis$lower95),
max(cis$upper95)))
p1
p2 <- p1 +
geom_pointrange(aes(y = mean,
ymin = lower95,
ymax = upper95,
col = contains_mu,
fill = contains_mu))
p2
p3 <- p2 +
theme(legend.position = 'bottom') +
labs(title = '95% Confidence Intervals for the Mean Year of Penny Minting',
subtitle = 'Inferences from Samples vs Population Parameters',
caption = 'Pop. Mean = 1989.8, Pop. SD = 12.4')
p3
cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = reorder(replicate, mean))) +
geom_ribbon(aes(ymin = pop_low,
ymax = pop_high),
alpha = 0.1) +
geom_hline(yintercept = pop_mean,
linetype = 'dashed') +
coord_cartesian(ylim = c(min(cis$lower95),
max(cis$upper95))) +
geom_pointrange(aes(y = mean,
ymin = lower95,
ymax = upper95,
col = contains_mu,
fill = contains_mu)) +
theme(legend.position = 'bottom') +
labs(title = '95% Confidence Intervals for the Mean Year of Penny Minting',
subtitle = 'Inferences from Samples vs Population Parameters',
caption = 'Pop. Mean = 1989.8, Pop. SD = 12.4')
cis |>
# from the dplyr package, for modifying data
mutate(contains_mu = ifelse(
pop_mean >= lower95 &  #conditional statement
pop_mean <= upper95,
T, F)) |> # value to return if true, if false
ggplot(aes(x = reorder(replicate, mean))) +
geom_ribbon(aes(ymin = pop_low,
ymax = pop_high),
alpha = 0.1) +
geom_hline(yintercept = pop_mean,
linetype = 'dashed') +
coord_cartesian(ylim = c(min(cis$lower95),
max(cis$upper95))) +
geom_pointrange(aes(y = mean,
ymin = lower95,
ymax = upper95,
col = contains_mu,
fill = contains_mu)) +
theme(legend.position = 'bottom',
axis.text.x = element_blank()) +
labs(title = '95% Confidence Intervals for the Mean Year of Penny Minting',
subtitle = 'Inferences from Samples vs Population Parameters',
caption = 'Pop. Mean = 1989.8, Pop. SD = 12.4')
